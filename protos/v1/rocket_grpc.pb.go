// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: protos/v1/rocket.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RocketService_GetRocket_FullMethodName = "/rocket.RocketService/GetRocket"
	RocketService_SetRocket_FullMethodName = "/rocket.RocketService/SetRocket"
	RocketService_RemRocket_FullMethodName = "/rocket.RocketService/RemRocket"
)

// RocketServiceClient is the client API for RocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RocketServiceClient interface {
	GetRocket(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
	SetRocket(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRes, error)
	RemRocket(ctx context.Context, in *RemReq, opts ...grpc.CallOption) (*RemRes, error)
}

type rocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRocketServiceClient(cc grpc.ClientConnInterface) RocketServiceClient {
	return &rocketServiceClient{cc}
}

func (c *rocketServiceClient) GetRocket(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := c.cc.Invoke(ctx, RocketService_GetRocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketServiceClient) SetRocket(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRes, error) {
	out := new(SetRes)
	err := c.cc.Invoke(ctx, RocketService_SetRocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocketServiceClient) RemRocket(ctx context.Context, in *RemReq, opts ...grpc.CallOption) (*RemRes, error) {
	out := new(RemRes)
	err := c.cc.Invoke(ctx, RocketService_RemRocket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RocketServiceServer is the server API for RocketService service.
// All implementations must embed UnimplementedRocketServiceServer
// for forward compatibility
type RocketServiceServer interface {
	GetRocket(context.Context, *GetReq) (*GetRes, error)
	SetRocket(context.Context, *SetReq) (*SetRes, error)
	RemRocket(context.Context, *RemReq) (*RemRes, error)
	mustEmbedUnimplementedRocketServiceServer()
}

// UnimplementedRocketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRocketServiceServer struct {
}

func (UnimplementedRocketServiceServer) GetRocket(context.Context, *GetReq) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRocket not implemented")
}
func (UnimplementedRocketServiceServer) SetRocket(context.Context, *SetReq) (*SetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRocket not implemented")
}
func (UnimplementedRocketServiceServer) RemRocket(context.Context, *RemReq) (*RemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemRocket not implemented")
}
func (UnimplementedRocketServiceServer) mustEmbedUnimplementedRocketServiceServer() {}

// UnsafeRocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RocketServiceServer will
// result in compilation errors.
type UnsafeRocketServiceServer interface {
	mustEmbedUnimplementedRocketServiceServer()
}

func RegisterRocketServiceServer(s grpc.ServiceRegistrar, srv RocketServiceServer) {
	s.RegisterService(&RocketService_ServiceDesc, srv)
}

func _RocketService_GetRocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).GetRocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketService_GetRocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).GetRocket(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketService_SetRocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).SetRocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketService_SetRocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).SetRocket(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocketService_RemRocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocketServiceServer).RemRocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocketService_RemRocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocketServiceServer).RemRocket(ctx, req.(*RemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RocketService_ServiceDesc is the grpc.ServiceDesc for RocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rocket.RocketService",
	HandlerType: (*RocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRocket",
			Handler:    _RocketService_GetRocket_Handler,
		},
		{
			MethodName: "SetRocket",
			Handler:    _RocketService_SetRocket_Handler,
		},
		{
			MethodName: "RemRocket",
			Handler:    _RocketService_RemRocket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/v1/rocket.proto",
}
